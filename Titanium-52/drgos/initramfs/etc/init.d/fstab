#!/bin/sh /etc/rc.common
# Copyright (C) 2007 OpenWrt.org

START=20

do_mount() {
	local cfg="$1"
	config_get fstype "$cfg" fstype
	fstype="${fstype:-auto}"
	config_get options "$cfg" options
	options="${options:-rw}"
	config_get device "$cfg" device
	[ -n "$device" ] || return 0
	config_get target "$cfg" target
	[ -n "$target" ] || return 0
	mkdir -p $target
	config_get_bool enabled "$cfg" "enabled" '1'
	[ "$enabled" -eq 0 ] && options="noauto,$options"
	echo "$device	$target	$fstype	$options	0	0" >> /tmp/fstab
}

do_swapon() {
	local cfg="$1"
	config_get device "$cfg" device
	[ -n "$device" ] || return 0
	config_get_bool enabled "$cfg" "enabled" '1'
	[ "$enabled" -gt 0 ] && {
		echo "$device	none	swap	${noauto}sw	0	0" >> /tmp/fstab
	}
}

do_unmount() {
	local cfg="$1"
	config_get target "$cfg" target
	[ -n "$target" ] || return 0
	config_get_bool enabled "$cfg" "enabled" '1'
	[ "$enabled" -gt 0 ] && {
		umount $target
	}
}
	
do_swapoff() {
	local cfg="$1"
	config_get device "$cfg" device
	[ -n "$device" ] || return 0
	config_get_bool enabled "$cfg" "enabled" '1'
	[ "$enabled" -gt 0 ] && type swapoff >/dev/null && {
		swapoff $device
	}
}

update_fstab() {
	local mtd=`cat /proc/mtd | grep JFFS | cut -d':' -f 1`

	[ -n "$mtd" ] && {
		logger -s "update_fstab(): FAILURE - cannot identify filesystem location"
	}

        blockid=${mtd:3}
	CONFIG_MTD_DEV="/dev/mtdblock$blockid"

	[ -n "$CONFIG_MTD_DEV" ] && {
		/sbin/uci set fstab.config.device=$CONFIG_MTD_DEV
	}
}

set_default_config() {
	local uci_confdir="/etc/config/"
	local cfg="fstab"

	/sbin/uci setdefault $uci_confdir/$cfg.config="mount"
	/sbin/uci setdefault $uci_confdir/$cfg.config.target="/config"
	/sbin/uci setdefault $uci_confdir/$cfg.config.fstype="jffs2"
	/sbin/uci setdefault $uci_confdir/$cfg.config.options="ro"
	/sbin/uci setdefault $uci_confdir/$cfg.config.enabled=1
}

start() {
	update_fstab
	config_load fstab
	echo '# WARNING: this is an auto generated file, please use uci to set static filesystems' > /tmp/fstab
	config_foreach do_mount mount
	config_foreach do_swapon swap
	mount -a
	[ -x /sbin/swapon ] && swapon -a
}

stop() {
	config_load fstab
	config_foreach do_unmount mount
	config_foreach do_swapoff swap
}

