#!/bin/sh /etc/rc.common
# Copyright (C) 2007 OpenWrt.org

START=60
DNS_SERVERS=""
DOMAIN_NAME=""
DOMAIN=""
STRICTORDER=""
RESOLV_CONF="/tmp/resolv.conf.auto"
RESOLV_CONF_STATIC_TMP="/tmp/resolv.conf.static.txt"
SERVER_ARG1=

DHCP_OPT_INHER_FILE="/tmp/dhcp_opt_inher_file"
DHCP_OPT_COMMON_FILE="/tmp/dhcp_opt_common_file"
DHCP_OPT_CLASS_FILE="/tmp/dhcp_opt_class_file"
DHCP_OPT_EXCLASS_FILE="/tmp/dhcp_opt_exclass_file"
DHCP_OPT_CLIENT_FILE="/tmp/dhcp_opt_client_file"
DHCP_POOL_CLIENT_FILE="/tmp/dhcp_pool_client_file"
DHCP_POOL_EXCLASS_FILE="/tmp/dhcp_pool_exclass_file"
DHCP_POOL_CLASS_FILE="/tmp/dhcp_pool_class_file"
DHCP_POOL_COMMON_FILE="/tmp/dhcp_pool_common_file"
DHCP_CONF_FILE="/tmp/dhcp_conf_file"

. /bin/dnsrebuild.sh
. /bin/dns_eval.sh

dhcp_calc() {
	local ip="$1"
	local res=0

	while [ -n "$ip" ]; do
		part="${ip%%.*}"
		res="$(($res * 256))"
		res="$(($res + $part))"
		[ "${ip%.*}" != "$ip" ] && ip="${ip#*.}" || ip=
	done
	echo "$res"
}

append_bool() {
	local section="$1"
	local option="$2"
	local value="$3"
	local _loctmp
	config_get_bool _loctmp "$section" "$option" 0
	[ $_loctmp -gt 0 ] && append args "$value"
}

append_parm() {
	local section="$1"
	local option="$2"
	local switch="$3"
	local _loctmp
	config_get _loctmp "$section" "$option"
	[ -z "$_loctmp" ] && return 0
	append args "$switch $_loctmp"
}

append_server() {
	append args "-S $1"
}

append_interface() {
	local ifname=$(uci_get_state network "$1" ifname "$1")
	append args "-i $ifname"
}

append_notinterface() {
	local ifname=$(uci_get_state network "$1" ifname "$1")
	append args "-I $ifname"
}

append_addnhosts() {
	append args "-H $1"
}

append_bogusnxdomain() {
	append args "-B $1"
}

dnsmasq() {
	local cfg="$1"
	append_bool "$cfg" authoritative "-K"
	append_bool "$cfg" nodaemon "-d"
	append_bool "$cfg" domainneeded "-D"
	append_bool "$cfg" filterwin2k "-f"
	append_bool "$cfg" nohosts "-h"
	append_bool "$cfg" nonegcache "-N"
	append_bool "$cfg" strictorder "-o"
	append_bool "$cfg" logqueries "-q"
	append_bool "$cfg" noresolv "-R"
	append_bool "$cfg" localise_queries "-y"
	append_bool "$cfg" readethers "-Z"
	append_bool "$cfg" dbus "-1"
	append_bool "$cfg" boguspriv "-b"
	append_bool "$cfg" expandhosts "-E"
	append_bool "$cfg" enable_tftp "--enable-tftp"
	append_bool "$cfg" nonwildcard "-z"

	append_parm "$cfg" cachesize "-c"
	append_parm "$cfg" dnsforwardmax "-0"
	append_parm "$cfg" port "-p"
	append_parm "$cfg" ednspacket_max "-P"
	append_parm "$cfg" dhcpleasemax "-X"
	append_parm "$cfg" "queryport" "-Q"
	append_parm "$cfg" "domain" "-s"
	append_parm "$cfg" "local" "-S"
	config_list_foreach "$cfg" "server" append_server
	config_list_foreach "$cfg" "interface" append_interface
	config_list_foreach "$cfg" "notinterface" append_notinterface
	config_list_foreach "$cfg" "addnhosts" append_addnhosts
	config_list_foreach "$cfg" "bogusnxdomain" append_bogusnxdomain
	append_parm "$cfg" "leasefile" "-l"
	append_parm "$cfg" "resolvfile" "-r"
	append_parm "$cfg" "tftp_root" "--tftp-root"
	append_parm "$cfg" "dhcp_boot" "--dhcp-boot"

	config_get DOMAIN "$cfg" domain

	config_get_bool readethers "$cfg" readethers
	[ "$readethers" = "1" ] && [ -e "/etc/ethers" ] || touch /etc/ethers

	config_get leasefile $cfg leasefile
	[ -n "$leasefile" ] && [ -e "$leasefile" ] || touch "$leasefile"
	config_get_bool cachelocal "$cfg" cachelocal 1

	config_get hostsfile "$cfg" dhcphostsfile
	[ -e "$hostsfile" ] && append args "--dhcp-hostsfile=$hostsfile"

	config_get siaddr "$cfg" siaddr
	[ -n "$siaddr" ] && echo "dhcp-option=255,$siaddr" >> "$DHCP_OPT_COMMON_FILE"

	local rebind
	config_get_bool rebind "$cfg" rebind_protection 1
	[ $rebind -gt 0 ] && {
		logger -t dnsmasq \
			"DNS rebinding protection is active," \
			"will discard upstream RFC1918 responses!"
		append args "--stop-dns-rebind"

		local rebind_localhost
		config_get_bool rebind_localhost "$cfg" rebind_localhost 0
		[ $rebind_localhost -gt 0 ] && {
			logger -t dnsmasq "Allowing 127.0.0.0/8 responses"
			append args "--rebind-localhost-ok"
		}

		append_rebind_domain() {
			logger -t dnsmasq "Allowing RFC1918 responses for domain $1"
			append args "--rebind-domain-ok=$1"
		}

		config_list_foreach "$cfg" rebind_domain append_rebind_domain
	}
}

dhcp_subscrid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get subscriberid "$cfg" subscriberid
	[ -n "$subscriberid" ] || return 0

	append args "--dhcp-subscrid=$networkid,$subscriberid"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_remoteid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get remoteid "$cfg" remoteid
	[ -n "$remoteid" ] || return 0

	append args "--dhcp-remoteid=$networkid,$remoteid"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_circuitid_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get circuitid "$cfg" circuitid
	[ -n "$circuitid" ] || return 0

	append args "--dhcp-circuitid=$networkid,$circuitid"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_userclass_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get userclass "$cfg" userclass
	[ -n "$userclass" ] || return 0

	append args "--dhcp-userclass=$networkid,$userclass"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_vendorclass_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get vendorclass "$cfg" vendorclass
	[ -n "$vendorclass" ] || return 0

	append args "--dhcp-vendorclass=$networkid,$vendorclass"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_host_add() {
	local cfg="$1"
	local host_args=""

	config_get name "$cfg" name

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] && dhcp_option_add "$cfg" "$networkid"

	config_get ip "$cfg" ip
	[ -n "$ip" ] || return 0

	config_get mac "$cfg" mac
	[ -n "$mac" ] || return 0

	if [ $mac == "00:00:00:00:00:00" ]; then
		host_args="--dhcp-host=${networkid:+net:$networkid,}$ip${name:+,$name}"
	else
		host_args="--dhcp-host=$mac,${networkid:+net:$networkid,}$ip${name:+,$name}"
	fi

	config_get leasetime "$cfg" leasetime
	if [ -n "$leasetime" ]; then
		host_args="$host_args,$leasetime"
	else
		host_args="$host_args,24h"
	fi

	config_get ignore "$cfg" ignore
	[ -n "$ignore" ] || return 0
	if [ $ignore = "1" ]; then
		host_args="$host_args,ignore"
	fi

	append args $host_args
}

dhcp_mac_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || return 0

	config_get mac "$cfg" mac
	[ -n "$mac" ] || return 0

	append args "--dhcp-mac=$networkid,$mac"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_boot_add() {
	local cfg="$1"

	config_get networkid "$cfg" networkid

	config_get filename "$cfg" filename
	[ -n "$filename" ] || return 0

	config_get servername "$cfg" servername
	[ -n "$servername" ] || return 0

	config_get serveraddress "$cfg" serveraddress
	[ -n "$serveraddress" ] || return 0

	append args "--dhcp-boot=${networkid:+net:$networkid,}$filename,$servername,$serveraddress"

	dhcp_option_add "$cfg" "$networkid"
}

dns_add() {
	local cfg="$1"

	config_get domainname "$cfg" domainname
	[ -n "$domainname" ] && {
		DOMAIN_NAME="$domainname"
	}

	config_get nameserver "$cfg" nameserver
	[ -n "$nameserver" ] && {
		DNS_SERVERS="$DNS_SERVERS $nameserver"
	}

	config_get strictorder "$cfg" strictorder
	[ -n "$strictorder" ] && {
		STRICTORDER="$strictorder"
                [ "$STRICTORDER" == "1" ] && append args "-o"
	}

}

dhcp_add() {
	local cfg="$1"
	config_get net "$cfg" interface
	[ -n "$net" ] || return 0

	config_get networkid "$cfg" networkid
	[ -n "$networkid" ] || networkid="$net"

	config_get ifname "$net" ifname
	[ -n "$ifname" ] || return 0

	config_get dnsserver "$net" dns
	[ "$cachelocal" = "0" -a -n "$dnsserver" ] && {
		DNS_SERVERS="$DNS_SERVERS $dnsserver"
	}

	append_bool "$cfg" ignore "-2 '$ifname'" && return 0

	config_get proto "$net" proto
	[ "static" = "$proto" ] || return 0

	config_get ipaddr "$net" ipaddr
	config_get netmask "$cfg" netmask
	[ -n "$netmask" ] || config_get netmask "$net" netmask

	#check for an already active dhcp server on the interface, unless 'force' is set
	config_get_bool force "$cfg" force 0
	[ "$force" -gt 0 ] || {
		udhcpc -n -q -s /bin/true -t 1 -i $ifname >&- && return 0
	}

	config_get start "$cfg" start
	config_get limit "$cfg" limit
	config_get leasetime "$cfg" leasetime
	config_get options "$cfg" options
	config_get_bool dynamicdhcp "$cfg" dynamicdhcp 1

	leasetime="${leasetime:-24h}"
	start="$(dhcp_calc "${start:-64}")"
	limit="$((${limit:-189} + 1))"
	eval "$(ipcalc.sh $ipaddr $netmask $start $limit)"
	if [ "$dynamicdhcp" = "0" ]; then END="static"; fi
	echo "dhcp-range=$networkid,$START,$END,$NETMASK,$leasetime${options:+ $options}" >> "$DHCP_POOL_COMMON_FILE"

	dhcp_option_add "$cfg" "$networkid"
}

dhcp_get_option() {
	local section="$1"
	local tagname="$2"
	local filename="$3"
	local whole="1"
	local value
	local number

	config_get options "$section" dhcp_option
	[ -n "$options" ] && {
		for opt in $options; do
			opt_num=${opt%%,*}
			opt_type=${opt#*,}
			opt_val=${opt_type#*,}

			if [ "$whole" == 1 ]; then
				judge=${opt_val:0:1}
				if [ "$judge" == "\"" ]; then
					opt_len=${#opt_val}
					let opt_len=$opt_len-1

					judge=${opt_val:$opt_len:1}
					if [ "$judge" == "\"" ]; then
						whole=1
						echo "dhcp-option=$tagname,$opt_num,$opt_val" >> $filename
					else
						whole=0
						value="$opt_val"
						number="$opt_num"
					fi
				else
					echo "dhcp-option=$tagname,$opt_num,$opt_val" >> $filename
				fi
			else
				value="$value $opt_val"

				opt_len=${#opt_val}
				let opt_len=$opt_len-1

				judge=${opt_val:$opt_len:1}
				if [ "$judge" == "\"" ]; then
					whole=1
					echo "dhcp-option=$tagname,$number,$value" >> $filename
				else
					whole=0
				fi
			fi
		done
	}
}

dhcp_option_add() {
	local cfg="$1"
	local networkid="$2"

	dhcp_get_option "$cfg" "$networkid" "$DHCP_OPT_COMMON_FILE"
}

dhcp_classopt_add() {
	local cfg="$1"

	config_get classes "$cfg" items
	[ -n "$classes" ] || return 0

	for item in $classes; do
		config_get vtag        "$item" tag
		config_get vendorclass "$item" vendorclass
		config_get exact       "$item" exact
		if [ "$exact" == "1" ]; then
			echo "dhcp-exact-vendorclass=set:$vtag,$vendorclass" >> "$DHCP_OPT_EXCLASS_FILE"

			config_get siaddr "$item" siaddr
			[ -n "$siaddr" ] && echo "dhcp-option=tag:$vtag,255,$siaddr" >> "$DHCP_OPT_EXCLASS_FILE"

			config_get leasetime "$item" leasetime
			[ -n "$leasetime" ] && echo "dhcp-range=tag:$vtag,$START,$END,$NETMASK,$leasetime" >> "$DHCP_POOL_EXCLASS_FILE"

			dhcp_get_option "$item" "tag:$vtag" "$DHCP_OPT_EXCLASS_FILE"
		else
			echo "dhcp-vendorclass=set:$vtag,$vendorclass" >> "$DHCP_OPT_CLASS_FILE"

			config_get siaddr "$item" siaddr
			[ -n "$siaddr" ] && echo "dhcp-option=tag:$vtag,255,$siaddr" >> "$DHCP_OPT_CLASS_FILE"

			config_get leasetime "$item" leasetime
			[ -n "$leasetime" ] && echo "dhcp-range=tag:$vtag,$START,$END,$NETMASK,$leasetime" >> "$DHCP_POOL_CLASS_FILE"

			dhcp_get_option "$item" "tag:$vtag" "$DHCP_OPT_CLASS_FILE"
		fi

	done
}

dhcp_clientopt_add() {
	local cfg="$1"

	config_get clients "$cfg" items
	[ -n "$clients" ] || return 0

	for item in $clients; do
		config_get vtag    "$item" tag
		config_get macaddr "$item" mac
		echo "dhcp-mac=set:$vtag,$macaddr" >> "$DHCP_OPT_CLIENT_FILE"

		config_get siaddr "$item" siaddr
		[ -n "$siaddr" ] && echo "dhcp-option=tag:$vtag,255,$siaddr" >> "$DHCP_OPT_CLIENT_FILE"

		config_get leasetime "$item" leasetime
		[ -n "$leasetime" ] && echo "dhcp-range=tag:$vtag,$START,$END,$NETMASK,$leasetime" >> "$DHCP_POOL_CLIENT_FILE"

		dhcp_get_option "$item" "tag:$vtag" "$DHCP_OPT_CLIENT_FILE"
	done
}

set_default_config() {
	local uci_confdir="/etc/config/"
	local cfg="dhcp"
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq=dnsmasq
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.domainneeded=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.dhcpleasemax=253
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.boguspriv=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.filterwin2k=0
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.rebind_protection=0
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.localise_queries=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.nonwildcard=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.local="/lan/"
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.domain="domain_not_set.invalid"
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.expandhosts=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.nonegcache=0
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.authoritative=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.readethers=1
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.leasefile="/tmp/dhcp.leases"
	/sbin/uci setdefault $uci_confdir/$cfg.dnsmasq.resolvfile="/tmp/resolv.conf.auto"
	/sbin/uci add_list   $uci_confdir/$cfg.dnsmasq.interface="lan"
	/sbin/uci add_list   $uci_confdir/$cfg.dnsmasq.addnhosts="/tmp/hosts"

	/sbin/uci setdefault $uci_confdir/$cfg.lan.interface="lan"
	/sbin/uci setdefault $uci_confdir/$cfg.lan.networkid="lan"
	/sbin/uci setdefault $uci_confdir/$cfg.lan.start=64
	/sbin/uci setdefault $uci_confdir/$cfg.lan.limit=189
	/sbin/uci setdefault $uci_confdir/$cfg.lan.leasetime="24h"
	/sbin/uci setdefault $uci_confdir/$cfg.lan.ignore="0"

	/sbin/uci setdefault $uci_confdir/$cfg.wan.interface="wan"
	/sbin/uci setdefault $uci_confdir/$cfg.wan.ignore="0"

	/sbin/uci setdefault $uci_confdir/$cfg.dhcp_option=mac
	/sbin/uci setdefault $uci_confdir/$cfg.dhcp_option.mac="*:*:*:*:*:*"
	/sbin/uci setdefault $uci_confdir/$cfg.dhcp_option.networkid="lan"

	/sbin/uci setdefault $uci_confdir/$cfg.dns=dns
}

dhcp_domain_add() {
	local cfg="$1"
	local ip name names

	config_get names "$cfg" name
	[ -n "$names" ] || return 0

	config_get ip "$cfg" ip
	[ -n "$ip" ] || return 0

	local oIFS="$IFS"; IFS="."; set -- $ip; IFS="$oIFS"
	local raddr="${4:+$4.$3.$2.$1.in-addr.arpa}"

	for name in $names; do
		local fqdn="$name"

		[ "${fqdn%.*}" == "$fqdn" ] && \
			fqdn="$fqdn${DOMAIN:+.$DOMAIN}"

		append args "-A /$fqdn/$ip"

		[ -n "$raddr" ] && {
			append args "--ptr-record=$raddr,$fqdn"
			raddr=""
		}
	done
}

dhcp_srv_add() {
	local cfg="$1"

	config_get srv "$cfg" srv
	[ -n "$srv" ] || return 0

	config_get target "$cfg" target
	[ -n "$target" ] || return 0

	config_get port "$cfg" port

	local service="$srv,$target"
	[ -n "$port" ] && service="$service,$port"

	append args "-W $service"
}

# static name-servers always rebuild here only
start() {
	include /lib/network
	scan_interfaces
	config_load dhcp

	echo > $DHCP_OPT_COMMON_FILE
	echo > $DHCP_OPT_CLASS_FILE
	echo > $DHCP_OPT_EXCLASS_FILE
	echo > $DHCP_OPT_CLIENT_FILE
	echo > $DHCP_POOL_CLIENT_FILE
	echo > $DHCP_POOL_EXCLASS_FILE
	echo > $DHCP_POOL_CLASS_FILE
	echo > $DHCP_POOL_COMMON_FILE
	echo "# DHCP configuration file" > $DHCP_CONF_FILE

	args="--conf-file=$DHCP_CONF_FILE --log-dhcp"
	config_foreach dnsmasq dnsmasq
	config_foreach dhcp_host_add host
	config_foreach dhcp_boot_add boot
	config_foreach dhcp_mac_add mac
	config_foreach dhcp_vendorclass_add vendorclass
	config_foreach dhcp_userclass_add userclass
	config_foreach dhcp_circuitid_add circuitid
	config_foreach dhcp_remoteid_add remoteid
	config_foreach dhcp_subscrid_add subscrid
	config_foreach dhcp_domain_add domain
	config_foreach dhcp_srv_add srvhost
	config_foreach dhcp_add dhcp
	config_foreach dhcp_classopt_add  vclasslist
	config_foreach dhcp_clientopt_add vclientlist
	config_foreach dns_add dns

	[ -f $DHCP_OPT_INHER_FILE ] && cat $DHCP_OPT_INHER_FILE >> $DHCP_CONF_FILE
	cat $DHCP_OPT_COMMON_FILE >> $DHCP_CONF_FILE
	cat $DHCP_OPT_CLASS_FILE >> $DHCP_CONF_FILE
	cat $DHCP_OPT_EXCLASS_FILE >> $DHCP_CONF_FILE
	cat $DHCP_OPT_CLIENT_FILE >> $DHCP_CONF_FILE
	echo "# DHCP lease time" >> $DHCP_CONF_FILE
	cat $DHCP_POOL_CLIENT_FILE >> $DHCP_CONF_FILE
	cat $DHCP_POOL_EXCLASS_FILE >> $DHCP_CONF_FILE
	cat $DHCP_POOL_CLASS_FILE >> $DHCP_CONF_FILE
	cat $DHCP_POOL_COMMON_FILE >> $DHCP_CONF_FILE

        # rebuild static name-server file
	rm -f $RESOLV_CONF_STATIC_TMP
	[ -n "$DOMAIN" ] && [ "$DOMAIN" != "domain_not_set.invalid" ] && echo "search $DOMAIN" >> $RESOLV_CONF_STATIC_TMP
        # the 127.0.0.1 does not need to be in list
        #echo "nameserver 127.0.0.1" >> $RESOLV_CONF_STATIC_TMP
	for DNS_SERVER in $DNS_SERVERS ; do
	   echo "nameserver $DNS_SERVER" >> $RESOLV_CONF_STATIC_TMP
	done

        SERVER_ARG1=
        [ -f $RESOLV_CONF_SERVER_ARG ] && SERVER_ARG1=`cat $RESOLV_CONF_SERVER_ARG` 2> /dev/null
	 
        if [ -n "$SERVER_ARG1" ]; then
	   /usr/sbin/dnsmasq $args $SERVER_ARG1 &
        else
	   /usr/sbin/dnsmasq $args &
        fi

        echo -n > /tmp/resolv.conf
	[  -n "$DOMAIN_NAME" ] && {
	   echo "domain $DOMAIN_NAME" >> /tmp/resolv.conf
	}
        echo "nameserver 127.0.0.1" >> /tmp/resolv.conf

        #re-evaluate dnsmasq dynamic settings
        . /bin/dns_eval.sh
        dns_evaluate "dnsmasq"

}

stop() {
	[ -f /tmp/resolv.conf ] && {
		rm -f /tmp/resolv.conf
		#ln -s /tmp/resolv.conf.auto /tmp/resolv.conf
	}
	killall dnsmasq
	return 0
}

