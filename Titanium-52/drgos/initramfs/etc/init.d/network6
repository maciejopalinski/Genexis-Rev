#!/bin/sh /etc/rc.common
#Copyright (c) 2011 PacketFront International AB. All rights reserved.


START=45
STOP=45

debug_network6=0
network6_log_file=/tmp/network6.log

[ -f /tmp/debug_network6 ] && {
  debug_network6=1
  local msg="network6[$0 $@] started at $(date)"

  logger -s -t network6 -p daemon.debug "$msg"
  echo "$msg" >> $network6_log_file
}

dbg_log() {
  [ $debug_network6 = 1 ] && { 
    local date=`date +%s`
    local msg="$@"
    msg="${date}: ${msg}"
    logger -s -t network6 -p daemon.debug "${msg}"
    echo "$msg" >> $network6_log_file
  }
}


load() {
    
    dbg_log "load function starts"

    config_load network6
    

    #make some actions based on the configurations
    dbg_log "loop through interfaces $CONFIG_SECTIONS and enable IPv6"
    for dev in $CONFIG_SECTIONS; do
	
	dbg_log "check if interface $dev has changed"
	ifchanged=$(env | grep CHANGED_network6_$dev)
	[ -n "$APPLY_CHANGES" -a -z "$ifchanged" ] || {
	    dbg_log "Changes on interface $dev, take some actions"
	    config_get ifname $dev ifname
	    [ -z "$ifname" ] && continue
	    if echo "$ifname" | grep -q "ppp"; then
		config_get device $dev device
		[ -n "$device" ] && ifname="$device"
	    fi
	    config_get proto $dev proto
	    config_get ra $dev ra
	    dbg_log "proto=$proto ifname=$ifname ra=$ra"

	    kernelpath="/proc/sys/net/ipv6/conf/$ifname"

	    if [ "$proto" = "auto" ]; then 
	        true
	    elif [ "$proto" = "static" ]; then 
	        config_get ipaddr $dev ipaddr
		config_get netmask $dev netmask
		config_get gateway $dev gateway	    
		#configure interface
		if [ -n "$ipaddr" ] && [ -n "$netmask" ]; then
		    dbg_log "ip -6 addr add $ipaddr/$netmask dev $ifname"
		    ip -6 addr add $ipaddr/$netmask dev $ifname
		fi
	        #routes will be handled seperated!!, TODO
		if [ "$dev" != "loopback"  ] && [ "$dev" != "lan" ]; then
		    if [ -n "$gateway" ]; then
			dbg_log "ip -6 route add default via $gateway dev $ifname"
			ip -6 route add default via $gateway dev $ifname
		    fi
		fi
	    else #none
		dbg_log "ip -6 addr flush dev $ifname"
		ip -6 addr flush dev $ifname
		#Assign link-local after a flush
		ip -6 link set $ifname multicast off
		ip -6 link set $ifname multicast on
	    fi

	    #check slaac
	    rapath="$kernelpath/accept_ra"
	    if [ -n "$ra" ] && [ "$ra" -gt 0 ]; then
		#enable  slaac 0: disabled 1:enabled (2:enabled, overrride default)
		dbg_log "enable slaac: $rapath=$ra"
		echo "$ra" > "$rapath"
                #Speed up configuration by sending out a solicitation message(not required)
		rdisc6 "$ifname" -1 -w1 -r1
	    else
		dbg_log "disable slaac"
		[ -f "$rapath" ] && echo "0" > "$rapath"
	    fi

	    if [ -d "$kernelpath" ]; then
		#About IPv6! SLAAC wont work if forwarding is enabled on 
                #a interface. To be able to run SLAAC on a routed interface 
                #forwarding must be disabled! Enable forwarding by keep the 
                #"all" and "default" flag enabled:
                # /proc/sys/net/ipv6/conf/all/forwarding=1
                #/proc/sys/net/ipv6/conf/default/forwarding=1
                #In later kernels > 2.6.37 accept_ra can be set to 2 and override
                #default behaviour. Until then add this kludge!

		#Note, RADVD won't work properly if forwarding is not enabled on 
		#LAN:
                #Fix bug #24397 A LAN host delete it's default route after a ping.
                #DRG responded a neighbor solicitation message with incorrect flags which
                #causes the host to remove the default route. DRG is now sending the neighbor
                #advertisment with correct values.
		[ "$dev" != lan ] &&{
		    dbg_log "disable forwarding:"
		    echo "0" > "$kernelpath/forwarding"
		}
	    fi
	}
    done
    dbg_log "[loop] change interfaces done"

    dbg_log "load function stop"
    return 0
}

start() {
    #start RA daemon
    pind -d&
    #
    load
    
    #enable forwarding on lan
    config_get ifname lan ifname
    [ -z "$ifname" ] || echo "1" > /proc/sys/net/ipv6/conf/"$ifname"/forwarding
    return 0
}

reload() {
    load
}

restart() {
    load
}


stop() {
    config_load network6
    
    dbg_log "loop through $CONFIG_SECTIONS and disable interfaces"
    for dev in $CONFIG_SECTIONS; do
	config_get ifname $dev ifname
	ip -6 addr flush dev $ifname
    done
    pkill pind
    return 0
}
