#!/bin/sh /etc/rc.common
# Copyright (C) Genexis B.V.

START=99
GAPS_CLIENT="GAPS client"
CFG_PROV="/usr/bin/gxConfig"
cfg="gaps"
#logfile="/dev/null"
logfile="/tmp/log/gaps.log"

set_default_config() {
    local uci_confdir="/etc/config"
    local client="$cfg.client"
    local server="$cfg.server"

    /sbin/uci setdefault $uci_confdir/$client="config"
    /sbin/uci setdefault $uci_confdir/$client.binary="gapsd"
    /sbin/uci setdefault $uci_confdir/$client.enable="1"
    /sbin/uci setdefault $uci_confdir/$client.port="9115"
    /sbin/uci setdefault $uci_confdir/$client.loglev="7"

    /sbin/uci setdefault $uci_confdir/$server="config"
    /sbin/uci setdefault $uci_confdir/$server.port="9114"

    mkdir -p /tmp/gaps
}

get_mgmt_dev() {
    local mgmt_dev

    local mgmt_if=`uci get route.mgmt_src_if 2> /dev/null`
    [ -z "$mgmt_if" ] && {
      mgmt_if=`uci get network.default.wan_if 2> /dev/null`
    }

    [ -n "$mgmt_if" ] && mgmt_dev=`cli_intf2dev $mgmt_if`

    echo "$mgmt_dev"
}

start() {
    local gapsd_pid=$(cat /var/run/gapsd.pid 2>/dev/null)
    config_load $cfg >>$logfile 2>&1

    config_get enable "client" enable
    [ "$enable" != "1" ] && {
       logger -p local4.notice "gaps: $GAPS_CLIENT is disabled. Not started."
       exit 1                                                                   
    }

    config_get binary "client" binary
    if [ -n "$gapsd_pid" ] && [ -d "/proc/$gapsd_pid" ]; then
      logger -p local4.notice "gaps: Warning, a $GAPS_CLIENT is already running, pid=$gapsd_pid"
      return 1
    fi

    config_get host_s "server" host
    config_get port_s "server" port
    [ -z "$host_s" ] && {
        logger -p local4.notice "gaps: Warning, no GAPS server address! Not started"
        exit 1
    }

    config_get vlan_c "client" vlan
    [ -n "$vlan_c" ] && {
       $CFG_PROV ${loglev_c:+-l $loglev_c} ${vlan_c:+-v $vlan_c} "/tmp/dummy.txt"
    }

    config_get port_c "client" port
    config_get ipaddr_c "client" ipaddr

    local mgmt_dev=`get_mgmt_dev`

    config_get loglev_c "client" loglev

    config_get id_c "client" id

    $binary ${id_c:+-c $id_c} ${mgmt_dev:+-i $mgmt_dev} ${ipaddr_c:+-a $ipaddr_c} ${port_c:+-p $port_c} ${loglev_c:+-l $loglev_c} $host_s $port_s >>$logfile 2>&1 &

    logger -p local4.notice "gaps: $GAPS_CLIENT daemon started serv=$host_s"
    return 0
}

stop() {
    local binary=`/sbin/uci get $cfg.client.binary`
    local gapsd_pid=$(cat /var/run/gapsd.pid 2>/dev/null)
    local max_loop=0
    [ -z "$gapsd_pid" ] && return 0
    kill -9 $gapsd_pid 2>/dev/null
    while [ -n "$gapsd_pid" -a -d "/proc/$gapsd_pid" ] ; do
      # wait for gapsd to respond
      sleep 1
      # increment the loop counter
      max_loop=`expr $max_loop + 1`
      # if >= 4 seconds, then just do a kill to all gapsd processes
      if [ $max_loop -ge 4 ] ; then
        logger -p local4.notice "gaps: $GAPS_CLIENT norm term fail, do killall"
        killall $binary 2>/dev/null
      fi

      # if >= 10 seconds, something is drastically wrong, abort out
      if [ $max_loop -ge 10 ] ; then
        logger -p local4.notice "gaps: $GAPS_CLIENT abort, stop failed!!!"
        return 1;
      fi
    done
    rm -f /var/run/gapsd.pid
    logger -p local4.notice "gaps: $GAPS_CLIENT daemon stopped pid=$gapsd_pid"
    return 0
}

restart() {
  stop
  start
}

reload() {
  restart
}

